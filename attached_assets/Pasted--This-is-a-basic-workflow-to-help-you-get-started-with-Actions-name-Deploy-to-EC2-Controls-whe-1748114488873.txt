# This is a basic workflow to help you get started with Actions

name: Deploy to EC2

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Logs into AWS ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push the Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pa_hotel_ai_assistant
          IMAGE_TAG: latest
        run: |
          # Check if repository exists, create if it doesn't
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region us-east-2 || aws ecr create-repository --repository-name $ECR_REPOSITORY --region us-east-2

          # Build and push the image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # SSH into the EC2 instance and run the Docker container
      - name: SSH into EC2, configure NGINX with Let's Encrypt SSL, and run Docker container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            DOMAIN=princealberthotel.dblytics.com
            EMAIL="kshitijk146@gmail.com" 

            # Kill lock if present
            sudo kill -9 $(lsof /var/lib/dpkg/lock-frontend -t) 2>/dev/null || true
            sudo rm -f /var/lib/dpkg/lock-frontend

            # Update system and install nginx + certbot
            sudo apt-get update
            sudo apt-get install -y nginx certbot python3-certbot-nginx

            # Create HTTP NGINX config for certbot
            sudo tee /etc/nginx/sites-available/$DOMAIN > /dev/null <<EOF
            server {
                listen 80;
                server_name $DOMAIN;
                
                location / {
                    proxy_pass http://localhost:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
                
                # Sound files location with proper CORS headers
                location /sounds/ {
                    proxy_pass http://localhost:5000;
                    add_header Access-Control-Allow-Origin "*";
                    add_header Cross-Origin-Resource-Policy "cross-origin";
                    add_header Content-Type "audio/mpeg";
                    expires 1d;
                }
                
                # API sound endpoint with proper CORS headers
                location /api/sound/ {
                    proxy_pass http://localhost:5000;
                    add_header Access-Control-Allow-Origin "*";
                    add_header Cross-Origin-Resource-Policy "cross-origin";
                    add_header Content-Type "audio/mpeg";
                    expires 1d;
                }
                
                # Service worker with proper cache headers
                location = /service-worker.js {
                    proxy_pass http://localhost:5000;
                    add_header Service-Worker-Allowed "/";
                    add_header Cache-Control "no-cache";
                    add_header Cross-Origin-Embedder-Policy "unsafe-none";
                    add_header Cross-Origin-Opener-Policy "unsafe-none";
                }
                
                # Web app manifest with proper content type
                location = /manifest.json {
                    proxy_pass http://localhost:5000;
                    add_header Content-Type "application/manifest+json";
                    add_header Cache-Control "no-cache";
                }
            }
            EOF

            # Enable site and reload NGINX
            sudo ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default || true
            sudo nginx -t && sudo systemctl reload nginx

            # Run certbot to install SSL certificate
            sudo certbot --nginx --non-interactive --agree-tos --email $EMAIL -d $DOMAIN
            
            # Add security headers for PWA support to the HTTPS config
            sudo sed -i '/ssl_prefer_server_ciphers/a \\n    # Security headers for PWA and audio playback\n    add_header Content-Security-Policy "default-src \x27self\x27; script-src \x27self\x27 \x27unsafe-inline\x27 \x27unsafe-eval\x27; connect-src \x27self\x27 https://$DOMAIN wss://$DOMAIN; img-src \x27self\x27 data: blob:; style-src \x27self\x27 \x27unsafe-inline\x27; media-src \x27self\x27 blob: https://$DOMAIN; object-src \x27none\x27; frame-ancestors \x27self\x27; worker-src \x27self\x27 blob:;";\n    add_header X-Content-Type-Options "nosniff";\n    add_header Cross-Origin-Embedder-Policy "unsafe-none";\n    add_header Cross-Origin-Opener-Policy "unsafe-none";\n    add_header Cross-Origin-Resource-Policy "cross-origin";\n    add_header X-Frame-Options "SAMEORIGIN";\n    add_header X-XSS-Protection "1; mode=block";\n    add_header Permissions-Policy "autoplay=*";\n    add_header Feature-Policy "autoplay *";' /etc/nginx/sites-available/$DOMAIN

            # Reload nginx to apply the changes
            sudo nginx -t && sudo systemctl reload nginx

            # Login to AWS ECR
            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 664418994345.dkr.ecr.us-east-2.amazonaws.com

            # Stop and remove old container
            docker stop pa_hotel_ai_assistant-container || true
            docker rm pa_hotel_ai_assistant-container || true

            # Run container
            docker run -d --name pa_hotel_ai_assistant-container \
            -p 5000:5000 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
            -e SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            -e SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
            -e SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} \
            -e N8N_WEBHOOK_URL=${{ secrets.N8N_WEBHOOK_URL }} \
            -e HOST=0.0.0.0 \
            --restart unless-stopped \
              664418994345.dkr.ecr.us-east-2.amazonaws.com/pa_hotel_ai_assistant:latest