import { useState, useEffect, useRef } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { type SocialMedia } from "@shared/schema";
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  CardFooter
} from "@/components/ui/card";
import {
  CameraIcon,
  ImageIcon,
  RefreshCw,
  Send,
  Upload
} from "lucide-react";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { format } from "date-fns";
import { MessageSquare, Share2, ThumbsUp, ThumbsDown, Plus, Loader2, Undo2, Check, Eye } from "lucide-react";
import { cn } from "@/lib/utils";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

function SocialPlatformIcon({ platform }: { platform: string }) {
  switch (platform.toLowerCase()) {
    case "facebook":
      return <i className="ri-facebook-circle-fill text-[#1877F2] text-xl"></i>;
    case "instagram":
      return <i className="ri-instagram-fill text-[#E4405F] text-xl"></i>;
    case "twitter":
    case "x":
      return <i className="ri-twitter-x-fill text-black text-xl"></i>;
    case "tiktok":
      return <i className="ri-tiktok-fill text-[#000000] text-xl"></i>;
    case "yelp":
      return <i className="ri-yelp-fill text-[#FF1A1A] text-xl"></i>;
    case "tripadvisor":
      return <i className="ri-tripadvisor-fill text-[#00AF87] text-xl"></i>;
    default:
      return <i className="ri-global-line text-neutral-600 text-xl"></i>;
  }
}

// Helper function to safely access social media data with database field name fallbacks
const getSocialData = (post: any) => {
  // Parse post content if available
  let imageUrl = null;
  let caption = null;
  const postContent = post.postContent || post.post_content;

  if (postContent && typeof postContent === 'string') {
    const parts = postContent.split('%');
    if (parts.length >= 2) {
      imageUrl = parts[0].trim();
      caption = parts[1].trim();
    }
  }

  return {
    id: post.id || 0,
    platform: post.platform || '',
    author: post.author || '',
    content: post.content || '',
    status: post.status || 'pending',
    postTime: post.postTime || post.post_time || new Date(),
    aiResponse: post.aiResponse || post.ai_response,
    aiRespondedAt: post.aiRespondedAt || post.ai_responded_at,
    prompt: post.prompt || '',
    imageUrl,
    caption,
    date: post.date || new Date()
  };
};

function SocialCard({ post }: { post: SocialMedia | any }) {
  const [expanded, setExpanded] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageModalOpen, setImageModalOpen] = useState(false);
  const { toast } = useToast();

  // Handle both snake_case from direct DB and camelCase from schema
  const { 
    id, platform, author, content, status, postTime, 
    aiResponse, aiRespondedAt, prompt, imageUrl, caption, date 
  } = getSocialData(post);

  // All posts generated by this application will show "AI Generated" tag
  // We'll display the actual platform data in the status badge
  const isAIGenerated = true; // Always show AI Generated badge

  // Clean up the status for consistency
  const cleanStatus = status?.toLowerCase().split('-')[0].trim();
  const isPending = cleanStatus === "pending";
  const isPosted = cleanStatus === "posted";

  const formattedDate = date ? format(new Date(date), "MMMM d, yyyy 'at' h:mm a") : '';

  // Debug status
  console.log(`Post ${id} status: ${status}, cleaned: ${cleanStatus}, isPending: ${isPending}, isPosted: ${isPosted}`);

  const getStatusBadge = (status: string) => {
    // Clean up the status if it's a combined status like "posted-pending"
    const cleanStatus = status?.toLowerCase().split('-')[0].trim();

    switch (cleanStatus) {
      case "pending":
        return <Badge variant="outline" className="bg-gray-200 text-gray-800">{platform}</Badge>;
      case "responded":
        return <Badge className="bg-black text-white">{platform}</Badge>;
      case "flagged":
        return <Badge className="bg-gray-700 text-white">{platform}</Badge>;
      case "posted":
        return <Badge className="bg-gray-500 text-white">{platform}</Badge>;
      default:
        return <Badge variant="outline" className="bg-gray-200 text-gray-800">{platform}</Badge>;
    }
  };

  return (
    <Card className="mb-5 bg-white border border-gray-100 shadow-sm">
      <CardHeader className="pb-3 pt-5 px-6">
        <div className="flex justify-between items-start">
          <div className="flex items-center">
            <div className="h-12 w-12 rounded-full flex items-center justify-center mr-4 bg-neutral-100">
              <SocialPlatformIcon platform={platform} />
            </div>
            <div>
              <CardTitle className="text-base flex items-center">
                {author || "AI Generated"}
                {isAIGenerated && (
                  <Badge variant="outline" className="ml-3">AI Generated</Badge>
                )}
                {!isAIGenerated && (
                  <Badge variant="outline" className="ml-3 capitalize">{platform}</Badge>
                )}
              </CardTitle>
              <div className="text-xs text-neutral-500 mt-1">
                {formattedDate}
              </div>
            </div>
          </div>
          {getStatusBadge(status)}
        </div>
      </CardHeader>
      <CardContent className="px-6 py-4">
        {/* For AI Generated post with image and caption */}
        {isAIGenerated && imageUrl && (
          <div className="mb-4">
            <div 
              className="aspect-video rounded-md overflow-hidden bg-gray-100 mb-3 relative cursor-pointer"
              onClick={() => setImageModalOpen(true)}
            >
              {!imageLoaded && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                </div>
              )}
              <img 
                src={imageUrl} 
                alt="Generated content" 
                className={cn(
                  "w-full h-full object-contain hover:scale-105 transition-transform duration-200",
                  !imageLoaded && "opacity-0"
                )}
                onLoad={() => setImageLoaded(true)}
                onError={(e) => {
                  e.currentTarget.src = "https://placehold.co/600x400?text=Image+Not+Available";
                  setImageLoaded(true);
                }}
              />
            </div>
            {caption && (
              <p className="text-sm text-neutral-800">{caption}</p>
            )}
          </div>
        )}
        
        {/* Image Modal for full-size view */}
        <Dialog open={imageModalOpen} onOpenChange={setImageModalOpen}>
          <DialogContent className="max-w-4xl w-full p-1 bg-transparent border-none">
            <div className="relative w-full h-full max-h-[80vh] flex items-center justify-center">
              <img 
                src={imageUrl} 
                alt="Full size content"
                className="max-w-full max-h-[calc(80vh-2rem)] object-contain rounded-md"
              />
              <Button 
                className="absolute top-2 right-2 h-8 w-8 rounded-full p-0 bg-black/40 hover:bg-black/60"
                onClick={() => setImageModalOpen(false)}
                variant="ghost"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
                <span className="sr-only">Close</span>
              </Button>
            </div>
          </DialogContent>
        </Dialog>

        {/* For regular social media content or customer comments */}
        {(content || prompt) && (
          <div className="text-neutral-700 mb-4">
            {isAIGenerated && prompt && expanded && (
              <div className="mb-3 p-3 bg-neutral-50 rounded-md">
                <p className="text-sm font-medium text-neutral-500 mb-1">Prompt:</p>
                <p className="text-sm text-neutral-600">{prompt}</p>
              </div>
            )}
            {content && !isAIGenerated && <p>{content}</p>}
          </div>
        )}

        {expanded && aiResponse && (
          <div className="mt-4 bg-neutral-50 p-3 rounded-md text-sm">
            <p className="font-medium mb-1 flex items-center">
              <MessageSquare className="h-4 w-4 mr-1" /> AI Response 
              <span className="text-xs text-neutral-500 ml-2">
                {aiRespondedAt && format(new Date(aiRespondedAt), "MMM d, h:mm a")}
              </span>
            </p>
            <p className="italic">{aiResponse}</p>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-between border-t px-6 py-4">
        {isPosted ? (
          <div className="flex items-center gap-2 w-full">
            <Badge className="bg-[#e6f0e9] text-[#2A4833]">Posted</Badge>
            <div className="text-xs text-neutral-500 ml-auto">
              Posted on {format(new Date(date || new Date()), "MMM d")}
            </div>
          </div>
        ) : isPending && isAIGenerated && imageUrl ? (
          <div className="flex justify-between w-full">
            <Button 
              variant="outline" 
              size="sm" 
              className="flex items-center"
              onClick={() => {
                console.log(`Toggle expanded from ${expanded} to ${!expanded}`);
                setExpanded(!expanded);
              }}
            >
              {prompt ? (
                <>
                  <Eye className="mr-2 h-4 w-4" /> {expanded ? "Hide Prompt" : "Show Prompt"}
                </>
              ) : (
                <>
                  <Undo2 className="mr-2 h-4 w-4" /> Retry
                </>
              )}
            </Button>

            {isPending && (
              <Button 
                onClick={async () => {
                  try {
                    // Send the post request
                    await apiRequest("POST", "/api/proxy/socialmedia", {
                      id,
                      status: "post"
                    });

                    // Update post status
                    await apiRequest("PATCH", `/api/social/${id}`, {
                      status: "posted"
                    });

                    // Show success toast
                    toast({
                      title: "Post approved",
                      description: "Your post has been approved and will be published soon."
                    });

                    // Refresh the social media list
                    queryClient.invalidateQueries({ queryKey: ['/api/social'] });
                  } catch (error) {
                    console.error("Error posting:", error);
                    toast({
                      title: "Error approving post",
                      description: "There was a problem approving your post.",
                      variant: "destructive"
                    });
                  }
                }}
                size="sm"
                className="bg-gradient-to-r from-[#2A4833] to-[#1e6434] hover:from-[#234029] hover:to-[#19542c]"
              >
                <Check className="mr-2 h-4 w-4" /> Approve & Post
              </Button>
            )}
          </div>
        ) : aiResponse ? (
          <>
            <Button variant="outline" size="sm" onClick={() => setExpanded(!expanded)}>
              {expanded ? "Hide Response" : "Show Response"}
            </Button>
            <div className="flex gap-2">
              <Button size="sm" variant="outline" className="flex items-center">
                <ThumbsUp className="h-4 w-4 mr-1" /> Approve
              </Button>
              <Button size="sm" className="bg-gradient-to-r from-[#2A4833] to-[#1e6434] hover:from-[#234029] hover:to-[#19542c]">Respond Manually</Button>
            </div>
          </>
        ) : (
          <>
            <Button variant="outline" size="sm" disabled>
              Awaiting AI Response
            </Button>
            <div className="flex gap-2">
              <Button size="sm" variant="outline" className="flex items-center">
                <ThumbsUp className="h-4 w-4 mr-1" /> Approve
              </Button>
              <Button size="sm" className="bg-gradient-to-r from-[#2A4833] to-[#1e6434] hover:from-[#234029] hover:to-[#19542c]">Respond Manually</Button>
            </div>
          </>
        )}
      </CardFooter>
    </Card>
  );
}

export default function Social() {
  // All hooks must be at the top in the same order
  const [activeTab, setActiveTab] = useState("all");
  const [isGenerateOpen, setIsGenerateOpen] = useState(false);
  const [prompt, setPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPostId, setGeneratedPostId] = useState<number | null>(null);
  const [generatedContent, setGeneratedContent] = useState<{ imageUrl: string, caption: string } | null>(null);
  const [showSuggestionInput, setShowSuggestionInput] = useState(false);
  const [suggestion, setSuggestion] = useState("");

  // Hooks
  const { toast } = useToast();
  const { data: socialPosts, isLoading } = useQuery<SocialMedia[]>({ 
    queryKey: ['/api/social'],
  });

  // State for dialog post status
  const [dialogPostStatus, setDialogPostStatus] = useState<string>("pending");
  const isPending = dialogPostStatus?.toLowerCase() === "pending";

  // Create post mutation
  const createPostMutation = useMutation({
    mutationFn: async (postData: any) => {
      const response = await apiRequest("POST", "/api/social", postData);
      return await response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/social'] });
      setDialogPostStatus("pending"); // Default new posts to pending
      return data;
    },
    onError: (error) => {
      toast({
        title: "Error creating post",
        description: "There was a problem creating your post.",
        variant: "destructive",
      });
    }
  });

  // Webhook interaction mutation using local proxy
  const sendWebhookMutation = useMutation({
    mutationFn: async (webhookData: any) => {
      console.log("Sending webhook data:", webhookData);
      const response = await apiRequest("POST", "/api/proxy/socialmedia", webhookData);

      if (!response.ok) {
        throw new Error("Failed to send webhook request");
      }

      return await response.json();
    },
    onSuccess: (data) => {
      console.log("Webhook response:", data);
      // The workflow has started, now we continue with the timer
      // Don't show any errors here as the process is working correctly
    },
    onError: (error) => {
      console.error("Webhook error:", error);
      toast({
        title: "Error processing request",
        description: "There was a problem connecting to the webhook service.",
        variant: "destructive",
      });
      setIsGenerating(false);
    }
  });

  if (isLoading) {
    return (
      <div className="py-6 px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <Skeleton className="h-8 w-64 mb-2" />
          <Skeleton className="h-4 w-96" />
        </div>

        <Skeleton className="h-12 w-full mb-4" />

        <div className="space-y-4">
          {[...Array(3)].map((_, i) => (
            <Skeleton key={i} className="h-40 w-full" />
          ))}
        </div>
      </div>
    );
  }

  // Group posts by platform
  const platforms = socialPosts ? 
    Array.from(new Set(socialPosts.map(post => getSocialData(post).platform))) : 
    [];

  const filteredPosts = socialPosts?.filter(post => {
    const { status, platform } = getSocialData(post);

    if (activeTab === "all") return true;
    if (activeTab === "pending") return status.toLowerCase() === "pending";
    if (activeTab === "responded") return status.toLowerCase() === "responded";
    return platform.toLowerCase() === activeTab.toLowerCase();
  }) || [];

  const pendingCount = socialPosts?.filter(post => 
    getSocialData(post).status.toLowerCase() === "pending"
  ).length || 0;

  const respondedCount = socialPosts?.filter(post => 
    getSocialData(post).status.toLowerCase() === "responded"
  ).length || 0;

  // Fetch a specific post
  const fetchPost = async (id: number) => {
    try {
      console.log(`Fetching post with ID: ${id}`);
      const response = await apiRequest("GET", `/api/social/${id}`);
      const data = await response.json();
      console.log("Received post data:", data);
      return data;
    } catch (error) {
      console.error("Error fetching post:", error);
      return null;
    }
  };

  // Handle generating a post
  const handleGeneratePost = async () => {
    if (!prompt.trim()) {
      toast({
        title: "Empty prompt",
        description: "Please enter a prompt to generate a post.",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);

    try {
      // Create the initial post
      const newPost = await createPostMutation.mutateAsync({
        platform: "Facebook", // Use the actual social media platform
        content: "AI generated post (in progress)",
        author: "AI Assistant",
        status: "pending", // Default to pending status
        prompt: prompt,
        postTime: new Date().toISOString(),
      });

      setGeneratedPostId(newPost.id);

      // Update dialog state
      setDialogPostStatus("pending");

      // Send webhook
      await sendWebhookMutation.mutateAsync({
        id: newPost.id,
        status: "generation",
        prompt: prompt,
      });

      // Poll for the result every 3 seconds
      const maxAttempts = 10; // 30 seconds total
      let attempts = 0;

      const checkForContent = async () => {
        attempts++;
        console.log(`Checking for content, attempt ${attempts}/${maxAttempts}`);

        // Fetch the updated post
        const updatedPost = await fetchPost(newPost.id);

        if (updatedPost) {
          // Check for both camelCase and snake_case versions of the field
          const content = updatedPost.postContent || updatedPost.post_content;
          console.log("Content found:", content);

          if (content) {
            // Parse the content
            const parts = content.split('%');
            console.log("Split parts:", parts);

            if (parts.length >= 2) {
              setGeneratedContent({
                imageUrl: parts[0].trim(),
                caption: parts[1].trim(),
              });
              setIsGenerating(false);
              return; // Success, stop polling
            }
          }
        }

        // If we reached the maximum attempts, show an error
        if (attempts >= maxAttempts) {
          toast({
            title: "Generation taking longer than expected",
            description: "The post is still being generated. You can check back later in the social media section.",
            variant: "default",
          });
          setIsGenerating(false);
          return;
        }

        // Otherwise, try again after 3 seconds
        setTimeout(checkForContent, 3000);
      };

      // Start checking after initial 3 second delay
      setTimeout(checkForContent, 3000);

    } catch (error) {
      console.error("Error generating post:", error);
      toast({
        title: "Error generating post",
        description: "There was a problem generating your post.",
        variant: "destructive",
      });
      setIsGenerating(false);
    }
  };

  // Handle retry
  const handleRetry = async () => {
    if (!generatedPostId) return;

    if (showSuggestionInput && !suggestion.trim()) {
      toast({
        title: "Empty suggestion",
        description: "Please enter a suggestion for improving the post.",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    setShowSuggestionInput(false); // Hide suggestion input while generating

    try {
      // Ensure the post status is set to pending for retries
      setDialogPostStatus("pending");

      // Send webhook for retry
      const response = await sendWebhookMutation.mutateAsync({
        id: generatedPostId,
        status: "retry",
        suggestion: suggestion,
      });

      console.log("Webhook response:", response);

      // Show toast notification
      toast({
        title: "Regenerating post",
        description: "The post is being regenerated with your suggestions. This may take up to 30 seconds.",
      });

      // Poll for the result every 3 seconds
      const maxAttempts = 10; // 30 seconds total
      let attempts = 0;

      const checkForContent = async () => {
        attempts++;
        console.log(`Checking for retry content, attempt ${attempts}/${maxAttempts}`);

        // Fetch the updated post
        const updatedPost = await fetchPost(generatedPostId);

        if (updatedPost) {
          // Check for both camelCase and snake_case versions of the field
          const content = updatedPost.postContent || updatedPost.post_content;
          console.log("Retry content found:", content);

          if (content) {
            // Parse the content
            const parts = content.split('%');
            console.log("Retry split parts:", parts);

            if (parts.length >= 2) {
              setGeneratedContent({
                imageUrl: parts[0].trim(),
                caption: parts[1].trim(),
              });
              setIsGenerating(false);
              setSuggestion("");
              return; // Success, stop polling
            }
          }
        }

        // If we reached the maximum attempts, show an error
        if (attempts >= maxAttempts) {
          toast({
            title: "Generation taking longer than expected",
            description: "The post is still being generated. You can check back later in the social media section.",
            variant: "default",
          });
          setIsGenerating(false);
          setSuggestion("");
          return;
        }

        // Otherwise, try again after 3 seconds
        setTimeout(checkForContent, 3000);
      };

      // Start checking after initial 10 second delay
      setTimeout(checkForContent, 10000);

    } catch (error) {
      console.error("Error retrying post:", error);
      toast({
        title: "Error retrying post",
        description: "There was a problem regenerating your post.",
        variant: "destructive",
      });
      setIsGenerating(false);
    }
  };

  // Handle approve
  const handleApprove = async () => {
    if (!generatedPostId) return;

    try {
      // Send webhook for approval
      await sendWebhookMutation.mutateAsync({
        id: generatedPostId,
        status: "post",
      });

      // Update the post status in the database
      await apiRequest("PATCH", `/api/social/${generatedPostId}`, {
        status: "posted"
      });

      // Update the dialog status
      setDialogPostStatus("posted");

      toast({
        title: "Post approved",
        description: "Your post has been approved and will be published soon.",
      });

      // Close dialog and reset states
      setIsGenerateOpen(false);
      setPrompt("");
      setGeneratedPostId(null);
      setGeneratedContent(null);
      setShowSuggestionInput(false);
      setSuggestion("");

      // Refetch social posts
      queryClient.invalidateQueries({ queryKey: ['/api/social'] });

    } catch (error) {
      console.error("Error approving post:", error);
      toast({
        title: "Error approving post",
        description: "There was a problem approving your post.",
        variant: "destructive",
      });
    }
  };

  // Reset the dialog when it's closed or when canceling suggestion input
  const handleDialogClose = (forceClear = false) => {
    // If generation is in progress and we're not forcing a clear, prevent closing
    if (isGenerating && !forceClear) {
      toast({
        title: "Generation in progress",
        description: "Please wait for the generation to complete before closing.",
        variant: "destructive",
      });
      return;
    }

    // If in suggestion mode and not forcing a clear, just exit suggestion mode but keep dialog open
    if (showSuggestionInput && !forceClear) {
      setShowSuggestionInput(false);
      setSuggestion("");
      return;
    }

    // Otherwise, fully reset the dialog
    setIsGenerateOpen(false);
    setPrompt("");
    setGeneratedPostId(null);
    setGeneratedContent(null);
    setShowSuggestionInput(false);
    setSuggestion("");
  };

  // Generated Post Card Component
  function GeneratedPostCard({ content }: { content: { imageUrl: string; caption: string } }) {
    const [isImageLoaded, setIsImageLoaded] = useState(false);
    const [showFullCaption, setShowFullCaption] = useState(false);

    const caption = content.caption.trim();
    const isLongCaption = caption.length > 150;
    const displayCaption = !showFullCaption && isLongCaption 
      ? caption.substring(0, 147) + "..." 
      : caption;

    return (
      <Card className="mb-5 overflow-hidden bg-white border border-gray-100 shadow-sm">
        <div className="aspect-square max-h-[400px] w-full overflow-hidden bg-gray-100 relative">
          {!isImageLoaded && (
            <div className="absolute inset-0 flex items-center justify-center">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          )}
          <img 
            src={content.imageUrl} 
            alt="Generated post" 
            className={cn(
              "w-full h-full object-contain",
              !isImageLoaded && "opacity-0"
            )}
            onLoad={() => setIsImageLoaded(true)}
            onError={(e) => {
              e.currentTarget.src = "https://placehold.co/600x400?text=Image+Not+Available";
              setIsImageLoaded(true);
            }}
          />
        </div>
        <CardContent className="px-6 py-5">
          <p className="text-neutral-700">
            {displayCaption}
            {isLongCaption && (
              <Button 
                variant="link" 
                className="p-0 h-auto ml-1 text-primary"
                onClick={() => setShowFullCaption(!showFullCaption)}
              >
                {showFullCaption ? "Show less" : "Read more"}
              </Button>
            )}
          </p>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="py-6 px-4 sm:px-6 lg:px-8">
      <div className="mb-8 flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-display font-bold text-neutral-900">Social Media</h1>
          <p className="mt-1 text-sm text-neutral-600">
            Monitor and respond to social media interactions with AI assistance
          </p>
        </div>
        
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={() => window.location.href = "#gallery"}
            className="border-black text-black hover:bg-gray-100"
          >
            <i className="ri-image-line mr-2"></i> Photo Gallery
          </Button>
          
          <Button 
            onClick={() => setIsGenerateOpen(true)}
            className="bg-black text-white hover:bg-gray-800"
          >
            <Plus className="mr-2 h-4 w-4" /> Generate Post
          </Button>
        </div>

        {/* Generate Post Dialog */}
        <Dialog 
          open={isGenerateOpen} 
          onOpenChange={(open) => {
            // Only allow closing if not generating
            if (!open && !isGenerating) {
              setIsGenerateOpen(false);
              setPrompt("");
              setGeneratedPostId(null);
              setGeneratedContent(null);
              setShowSuggestionInput(false);
              setSuggestion("");
            } else if (!open && isGenerating) {
              toast({
                title: "Generation in progress",
                description: "Please wait for the generation to complete before closing.",
                variant: "destructive",
              });
            }
          }}
        >
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Generate Social Media Post</DialogTitle>
              <DialogDescription>
                Use AI to create engaging social media content for your restaurant.
              </DialogDescription>
            </DialogHeader>

            {showSuggestionInput && !isGenerating ? (
              // Suggestion input mode (for retries)
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="suggestion">How would you like to improve the post?</Label>
                  <Textarea 
                    id="suggestion" 
                    placeholder="e.g., Make it more casual and add emojis" 
                    value={suggestion}
                    onChange={(e) => setSuggestion(e.target.value)}
                    className="min-h-[100px]"
                  />
                </div>

                {generatedContent && (
                  <div className="mt-4">
                    <p className="text-sm text-neutral-500 mb-2">Current post:</p>
                    <GeneratedPostCard content={generatedContent} />
                  </div>
                )}

                <DialogFooter>
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      setShowSuggestionInput(false);
                      setSuggestion("");
                    }}
                  >
                    Cancel
                  </Button>
                  <Button 
                    onClick={handleRetry}
                    className="bg-gradient-to-r from-[#2A4833] to-[#1e6434] hover:from-[#234029] hover:to-[#19542c]"
                  >
                    Generate with Suggestion
                  </Button>
                </DialogFooter>
              </div>
            ) : isGenerating ? (
              // Loading state (for both initial generation and retries)
              <div className="py-8 flex flex-col items-center justify-center">
                <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
                <p className="text-center text-sm text-neutral-600">
                  {generatedContent ? "Regenerating your post..." : "Generating your post..."} This may take up to 30 seconds.
                </p>
                <p className="text-center text-xs text-neutral-500 mt-2">
                  The n8n workflow has been started. Your image and caption will appear shortly.
                </p>
              </div>
            ) : !generatedContent ? (
              // Initial prompt input or loading state
              <>
                {!isGenerating ? (
                  <div className="space-y-4 py-4">
                    <div className="space-y-2">
                      <Label htmlFor="prompt">What kind of post would you like to create?</Label>
                      <Textarea 
                        id="prompt" 
                        placeholder="e.g., Create a post promoting our weekend brunch special with eggs benedict and mimosas" 
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        className="min-h-[100px]"
                      />
                    </div>
                    <DialogFooter>
                      <Button 
                        variant="outline" 
                        onClick={() => setIsGenerateOpen(false)}
                      >
                        Cancel
                      </Button>
                      <Button 
                        onClick={handleGeneratePost}
                        className="bg-gradient-to-r from-[#2A4833] to-[#1e6434] hover:from-[#234029] hover:to-[#19542c]"
                      >
                        Generate
                      </Button>
                    </DialogFooter>
                  </div>
                ) : (
                  <div className="py-8 flex flex-col items-center justify-center">
                    <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
                    <p className="text-center text-sm text-neutral-600">
                      Generating your post... This may take up to 30 seconds.
                    </p>
                    <p className="text-center text-xs text-neutral-500 mt-2">
                      The n8n workflow has been started. Your image and caption will appear shortly.
                    </p>
                  </div>
                )}
              </>
            ) : (
              // Generated content display
              <>
                <div className="py-4">
                  <GeneratedPostCard content={generatedContent} />

                  <div className="flex justify-between mt-4">
                    <Button 
                      variant="outline" 
                      onClick={() => {
                        setShowSuggestionInput(true);
                        console.log("Retry clicked - setting showSuggestionInput to true");
                      }}
                      disabled={isGenerating}
                      className="flex items-center"
                    >
                      <Undo2 className="mr-2 h-4 w-4" /> Retry
                    </Button>

                    {isPending && (
                      <Button 
                        onClick={handleApprove}
                        disabled={isGenerating}
                        className="bg-gradient-to-r from-[#2A4833] to-[#1e6434] hover:from-[#234029] hover:to-[#19542c]"
                      >
                        <Check className="mr-2 h-4 w-4" /> Approve
                      </Button>
                    )}
                  </div>
                </div>
              </>
            )}
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card 
          className={cn(
            "cursor-pointer hover:border-[#2A4833]/50 transition-colors",
            activeTab === "all" ? "border-[#2A4833]" : ""
          )}
          onClick={() => setActiveTab("all")}
        >
          <CardContent className="p-4 flex justify-between items-center">
            <div>
              <p className="text-sm text-neutral-500">All Platforms</p>
              <p className="text-xl font-semibold">{socialPosts?.length || 0}</p>
            </div>
            <Share2 className="h-6 w-6 text-neutral-400" />
          </CardContent>
        </Card>

        <Card 
          className={cn(
            "cursor-pointer hover:border-yellow-400/50 transition-colors",
            activeTab === "pending" ? "border-yellow-400" : ""
          )}
          onClick={() => setActiveTab("pending")}
        >
          <CardContent className="p-4 flex justify-between items-center">
            <div>
              <p className="text-sm text-neutral-500">Pending</p>
              <p className="text-xl font-semibold">{pendingCount}</p>
            </div>
            <Badge className="bg-yellow-100 text-yellow-800">{pendingCount}</Badge>
          </CardContent>
        </Card>

        <Card 
          className={cn(
            "cursor-pointer hover:border-green-400/50 transition-colors",
            activeTab === "responded" ? "border-green-400" : ""
          )}
          onClick={() => setActiveTab("responded")}
        >
          <CardContent className="p-4 flex justify-between items-center">
            <div>
              <p className="text-sm text-neutral-500">Responded</p>
              <p className="text-xl font-semibold">{respondedCount}</p>
            </div>
            <Badge className="bg-green-100 text-green-800">{respondedCount}</Badge>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <Tabs defaultValue="platforms" className="h-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="platforms">Platforms</TabsTrigger>
                <TabsTrigger value="stats">Stats</TabsTrigger>
              </TabsList>
              <TabsContent value="platforms" className="pt-2">
                <div className="text-sm flex flex-wrap gap-2">
                  {platforms.map(platform => (
                    <Badge 
                      key={platform}
                      variant="outline" 
                      className={cn(
                        "cursor-pointer flex items-center",
                        activeTab === platform.toLowerCase() ? "border-[#2A4833]" : ""
                      )}
                      onClick={() => setActiveTab(platform.toLowerCase())}
                    >
                      <SocialPlatformIcon platform={platform} />
                      <span className="ml-1 capitalize">{platform}</span>
                    </Badge>
                  ))}
                </div>
              </TabsContent>
              <TabsContent value="stats" className="pt-2">
                <div className="text-sm space-y-2">
                  <div className="flex justify-between">
                    <span>Response Rate:</span>
                    <span className="font-medium">92%</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Avg. Response Time:</span>
                    <span className="font-medium">5.2 min</span>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>

      <div>
        <h2 className="text-lg font-medium mb-4">
          {activeTab === "all" ? "All Social Media Interactions" : 
           activeTab === "pending" ? "Pending Interactions" :
           activeTab === "responded" ? "Responded Interactions" :
           `${activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Interactions`}
        </h2>

        {filteredPosts.length === 0 ? (
          <Card>
            <CardContent className="text-center py-8">
              <p className="text-neutral-500">No social media posts matching the selected filter.</p>
            </CardContent>
          </Card>
        ) : (
          filteredPosts.map(post => <SocialCard key={post.id} post={post} />)
        )}
      </div>

      {/* Photo Gallery Section */}
      <div id="gallery" className="mt-12 pt-6 border-t border-gray-200">
        <GallerySection />
      </div>
    </div>
  );
}

// Gallery Section Component
function GallerySection() {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <>
      <div className="mb-6 flex justify-between items-center">
        <div>
          <h2 className="text-xl font-bold text-neutral-900">Prince Albert Hotel Gallery</h2>
          <p className="mt-1 text-sm text-neutral-600">
            Browse and manage photos from Prince Albert Hotel
          </p>
        </div>
        <Button 
          onClick={handleButtonClick}
          className="bg-black text-white hover:bg-gray-800"
        >
          <Upload className="mr-2 h-4 w-4" /> Upload Image
        </Button>
        <input 
          ref={fileInputRef}
          type="file" 
          className="hidden" 
          accept="image/*"
          onChange={(e) => {
            // Process the image upload in the GalleryContent component
            if (e.target.files && e.target.files.length > 0) {
              // Trigger the handleImageUpload function in GalleryContent
              // We'll store the file in a state here to pass it to the component
              // Or we can just hide implementation details in this component
              if (fileInputRef.current) {
                fileInputRef.current.value = '';
              }
            }
          }}
        />
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <GalleryContent fileInputRef={fileInputRef} />
      </div>
    </>
  );
}

// Gallery component
function GalleryContent({ fileInputRef }: { fileInputRef: React.RefObject<HTMLInputElement> }) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedPhoto, setSelectedPhoto] = useState<any | null>(null);
  const [captionDialog, setCaptionDialog] = useState(false);
  const [caption, setCaption] = useState("");
  const [isGeneratingCaption, setIsGeneratingCaption] = useState(false);
  
  // Handle image upload for gallery
  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) {
      return;
    }

    const file = e.target.files[0];
    const reader = new FileReader();
    
    reader.onloadend = async () => {
      try {
        const base64Image = reader.result?.toString().split(',')[1];
        if (!base64Image) {
          throw new Error('Failed to process image');
        }

        // Show loading toast
        toast({
          title: 'Uploading Image',
          description: 'Please wait while your image is being processed...',
        });

        // Get the webhook URL from the environment
        const response = await apiRequest('POST', '/api/proxy/pa_gallery', {
          image: base64Image,
          caption: 'New gallery image', // Default caption
          timestamp: new Date().toISOString()
        });

        if (!response.ok) {
          throw new Error('Failed to upload image');
        }

        const data = await response.json();
        
        // Success toast
        toast({
          title: 'Image Uploaded',
          description: 'Your image has been successfully uploaded to the gallery.',
        });

        // Refresh gallery data
        queryClient.invalidateQueries({ queryKey: ['/api/gallery'] });
        
      } catch (error) {
        console.error('Error uploading image:', error);
        toast({
          title: 'Upload Failed',
          description: 'There was a problem uploading your image.',
          variant: 'destructive',
        });
      }
      
      // Reset file input
      e.target.value = '';
    };

    reader.readAsDataURL(file);
  };

  // Set up effect to handle file uploads when fileInputRef changes
  useEffect(() => {
    if (fileInputRef.current) {
      const fileInput = fileInputRef.current;
      fileInput.addEventListener('change', handleImageUpload as any);
      
      return () => {
        fileInput.removeEventListener('change', handleImageUpload as any);
      };
    }
  }, [fileInputRef]);
  
  // Fetch gallery photos
  const { data: photos = [], isLoading, isError } = useQuery({
    queryKey: ['/api/gallery'],
    queryFn: async () => {
      const response = await fetch('/api/gallery');
      if (!response.ok) {
        throw new Error('Failed to fetch gallery');
      }
      return response.json();
    },
  });

  // Mutation to generate AI caption
  const generateCaptionMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/gallery/${id}/generate-caption`, {
        method: 'POST',
      });
      if (!response.ok) {
        throw new Error('Failed to generate caption');
      }
      return response.json();
    },
    onSuccess: (data) => {
      setCaption(data.caption);
      setIsGeneratingCaption(false);
      toast({
        title: "Caption Generated",
        description: "AI has successfully generated a caption for your image",
      });
    },
    onError: (error: any) => {
      setIsGeneratingCaption(false);
      toast({
        title: "Failed to Generate Caption",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  // Mutation to post photo to social media
  const postPhotoMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/gallery/${id}/post`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id }),
      });
      if (!response.ok) {
        throw new Error('Failed to post photo');
      }
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/gallery'] });
      toast({
        title: "Photo Posted",
        description: "Your photo has been successfully posted",
      });
      setCaptionDialog(false);
    },
    onError: (error: any) => {
      toast({
        title: "Failed to Post Photo",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  // Mutation to update photo caption
  const updateCaptionMutation = useMutation({
    mutationFn: async ({ id, caption }: { id: number, caption: string }) => {
      const response = await fetch(`/api/gallery/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ caption }),
      });
      if (!response.ok) {
        throw new Error('Failed to update caption');
      }
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/gallery'] });
      toast({
        title: "Caption Updated",
        description: "Photo caption has been updated successfully",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to Update Caption",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  const handleGenerateCaption = (photo: any) => {
    setSelectedPhoto(photo);
    setCaption(photo.caption || "");
    setCaptionDialog(true);
    setIsGeneratingCaption(true);
    generateCaptionMutation.mutate(photo.id);
  };

  const handleSaveCaption = () => {
    if (!selectedPhoto) return;
    
    updateCaptionMutation.mutate({
      id: selectedPhoto.id,
      caption: caption,
    });
  };

  const handlePostPhoto = () => {
    if (!selectedPhoto) return;
    postPhotoMutation.mutate(selectedPhoto.id);
  };

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {[1, 2, 3].map((i) => (
          <Card key={i} className="overflow-hidden">
            <Skeleton className="h-64 w-full" />
            <CardContent className="p-4">
              <Skeleton className="h-4 w-3/4 mb-2" />
              <Skeleton className="h-4 w-1/2" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (isError) {
    return (
      <div className="p-6 bg-red-50 rounded-lg">
        <p className="text-red-500">
          Error loading gallery. Please try again later.
        </p>
      </div>
    );
  }

  return (
    <>
      {photos.length === 0 ? (
        <div className="col-span-3 p-6 bg-gray-50 rounded-lg text-center">
          <CameraIcon className="h-12 w-12 mx-auto text-gray-400 mb-4" />
          <p className="text-gray-500">No photos in gallery yet</p>
        </div>
      ) : (
        <>
          {photos.map((photo: any) => (
            <Card key={photo.id} className="overflow-hidden">
              <div className="relative h-64 bg-gray-100">
                {photo.imageUrl ? (
                  <img
                    src={photo.imageUrl}
                    alt={photo.caption || "Gallery image"}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="flex items-center justify-center h-full">
                    <ImageIcon className="h-16 w-16 text-gray-400" />
                  </div>
                )}
                {photo.status === 'posted' && (
                  <div className="absolute top-2 right-2 bg-black text-white text-xs px-2 py-1 rounded-full">
                    Posted
                  </div>
                )}
              </div>
              <CardContent className="p-4">
                <p className="text-sm line-clamp-2">
                  {photo.caption || "No caption provided"}
                </p>
                <p className="text-xs text-gray-500 mt-2">
                  {new Date(photo.createdAt).toLocaleDateString()}
                </p>
              </CardContent>
              <CardFooter className="p-4 pt-0 flex justify-between">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleGenerateCaption(photo)}
                  className="border-black text-black hover:bg-gray-100"
                >
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Generate Caption
                </Button>
                <Button 
                  variant="default" 
                  size="sm"
                  onClick={() => {
                    setSelectedPhoto(photo);
                    setCaption(photo.caption || "");
                    setCaptionDialog(true);
                  }}
                  className="bg-black text-white hover:bg-gray-800"
                  disabled={photo.status === 'posted'}
                >
                  <Send className="h-4 w-4 mr-2" />
                  {photo.status === 'posted' ? 'Posted' : 'Post'}
                </Button>
              </CardFooter>
            </Card>
          ))}
        </>
      )}

      {/* Caption Dialog */}
      <Dialog open={captionDialog} onOpenChange={setCaptionDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Edit Caption & Post</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4 py-2">
            {selectedPhoto?.imageUrl && (
              <div className="w-full h-48 rounded-md overflow-hidden">
                <img 
                  src={selectedPhoto.imageUrl} 
                  alt="Selected" 
                  className="w-full h-full object-cover"
                />
              </div>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="caption">Caption</Label>
              <div className="relative">
                <Input
                  id="caption"
                  value={caption}
                  onChange={(e) => setCaption(e.target.value)}
                  className="pr-20"
                  disabled={isGeneratingCaption}
                />
                {isGeneratingCaption && (
                  <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                    <RefreshCw className="h-4 w-4 animate-spin" />
                  </div>
                )}
              </div>
              <p className="text-xs text-gray-500">
                This caption will be used when posting to social media
              </p>
            </div>
          </div>
          
          <div className="flex justify-between mt-4">
            <Button 
              variant="outline" 
              onClick={handleSaveCaption}
              disabled={isGeneratingCaption}
              className="border-black text-black hover:bg-gray-100"
            >
              Save Caption
            </Button>
            <Button 
              variant="default" 
              onClick={handlePostPhoto}
              disabled={isGeneratingCaption || !caption.trim()}
              className="bg-black text-white hover:bg-gray-800"
            >
              Post to Social Media
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}